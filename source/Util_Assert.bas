Attribute VB_Name = "Util_Assert"
'-------------------------------------------------------------------------------
' Name:        Util_Assert (Module)
' Purpose:     Assertion helper functions for ORCA Importer
'
' Author:      Brian Skinn
'                bskinn@alum.mit.edu
'
' Created:     10 May 2016
' Copyright:   (c) Brian Skinn 2016
' License:     The MIT License; see "license.txt" for full license terms
'                   and contributor agreement.
'
'       This file is part of ORCA Importer, an Excel VBA add-in providing
'       memoized import functionality for output generated by the ORCA
'       quantum chemistry software program package
'       (http://orcaforum.cec.mpg.de).
'
'       http://www.github.com/bskinn/excel-orcaimport
'
'-------------------------------------------------------------------------------

Option Explicit
Option Base 1

Public Sub assertIsArray(vnt As Variant)
    If Not IsArray(vnt) Then
        Err.Raise Number:=13, Description:="Type mismatch: Argument must be an array"
    End If
End Sub

Public Sub assertIs2D(vnt As Variant)
    ' Safest to call this only after 'assertIsArray()'
    If Not arrRank(vnt) = 2 Then
        Err.Raise Number:=13, Description:="Type mismatch: 2-D array required"
    End If
End Sub

Public Sub assertIs2DVector(vnt As Variant)
    ' Safest to call this only after 'assertIsArray()'
    Dim r As Long, d1 As Long, d2 As Long
    
    If Not arrRank(vnt) = 2 Then
        Err.Raise Number:=13, Description:="Type mismatch: Nx1 or 1xN array required"
    End If
    
    d1 = UBound(vnt, 1) - LBound(vnt, 1) + 1
    d2 = UBound(vnt, 2) - LBound(vnt, 2) + 1
    
    If Not (d1 * d2) = Application.WorksheetFunction.Max(d1, d2) Then
        Err.Raise Number:=13, Description:="Type mismatch: Nx1 or 1xN array required"
    End If
End Sub

Public Sub assertIs1D(vnt As Variant)
    ' Safest to call this only after 'assertIsArray()'
    If Not arrRank(vnt) = 1 Then
        Err.Raise Number:=13, Description:="Type mismatch: 1-D array required"
    End If
End Sub

Public Sub assertIs1Or2D(vnt As Variant)
    ' Safest to call this only after 'assertIsArray()'
    If Not (arrRank(vnt) = 1 Or arrRank(vnt) = 2) Then
        Err.Raise Number:=13, Description:="Type mismatch: 1-D or 2-D array required"
    End If
End Sub

Public Sub assertIsVector(vnt As Variant)
    ' Safest to call this only after 'assertIsArray()'
    ' Raise error if not 1-D or 2-D
    assertIs1Or2D vnt
    
    ' If 2-D, raise error if not Nx1 or 1xN
    If arrRank(vnt) = 2 Then
        assertIs2DVector vnt
    End If
    
End Sub

Public Sub assertPositive(val As Variant)
    If Not val > 0 Then
        Err.Raise Number:=380, Description:="Invalid property value: Must be positive"
    End If
End Sub

Public Sub assertNegative(val As Variant)
    If Not val < 0 Then
        Err.Raise Number:=380, Description:="Invalid property value: Must be negative"
    End If
End Sub

Public Sub assertNonPositive(val As Variant)
    If Not val <= 0 Then
        Err.Raise Number:=380, Description:="Invalid property value: Must be non-positive"
    End If
End Sub

Public Sub assertNonNegative(val As Variant)
    If Not val >= 0 Then
        Err.Raise Number:=380, Description:="Invalid property value: Must be non-negative"
    End If
End Sub

Public Sub assertBetween(val As Variant, low As Variant, high As Variant, include As Boolean)
    If include Then
        If val < low Or val > high Then
            Err.Raise Number:=380, Description:="Invalid property value: Outside valid range"
        End If
    Else
        If val <= low Or val >= high Then
            Err.Raise Number:=380, Description:="Invalid property value: Outside valid range"
        End If
    End If
End Sub

Public Sub assertEqual(val1 As Variant, val2 As Variant)
    If val1 <> val2 Then
        Err.Raise Number:=380, Description:="Invalid property value: Arguments not equal"
    End If
End Sub
