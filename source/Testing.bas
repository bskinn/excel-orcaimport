Attribute VB_Name = "Testing"
'-------------------------------------------------------------------------------
' Name:        Testing (Module)
' Purpose:     Scratch testing for the project.
'
' Author:      Brian Skinn
'                bskinn@alum.mit.edu
'
' Created:     30 Apr 2016
' Copyright:   (c) Brian Skinn 2016
' License:     The MIT License; see "license.txt" for full license terms
'                   and contributor agreement.
'
'       This file is part of ORCA Importer, an Excel VBA add-in providing
'       memoized import functionality for output generated by the ORCA
'       quantum chemistry software program package
'       (http://orcaforum.cec.mpg.de).
'
'       http://www.github.com/bskinn/excel-orcaimport
'
'-------------------------------------------------------------------------------

Option Explicit
Option Base 1

Sub testish()

    Dim vt() As Variant
    
    ReDim vt(0 To 5, 0 To 6, 0 To 2)
    
    Debug.Print arrRank(vt)
    
End Sub

Sub testish2()

    Dim vt As Variant
    
    vt = arrayify(Array(1, 2, 3, 4, 5))
    
    Debug.Print vt(2)
    
End Sub

Public Function testMat() As Variant
    Dim vt() As Variant
    Dim iter1 As Long, iter2 As Long
    
    ReDim vt(1 To 3, 1 To 4)
    
    For iter1 = 1 To 3
        For iter2 = 1 To 4
            vt(iter1, iter2) = iter1 ^ 0.5 + iter2 ^ 1.5
        Next iter2
    Next iter1
    
    testMat = vt
End Function

'
'Sub regTest()
'    Dim vt(1 To 1) As Variant
'
'    vt(1) = "tester"
'
'    Application.MacroOptions _
'            macro:="testEnum", _
'            Description:="Testing Enum AutoComplete", _
'            Category:=14, _
'            StatusBar:="StatusBar", _
'            ArgumentDescriptions:=vt, _
'            HasMenu:=True, _
'            MenuText:="Menu Text"
'End Sub

Public Function COSMOQCorr(ByVal outPath As String) As Variant

    Dim fs As FileSystemObject, tStrm As TextStream, workStr As String
    Dim rx As New RegExp, mchs As MatchCollection, mch As Match
    Dim uncorrEnergy As Double, corrEnergy As Double
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    
    If Not fs.FileExists(outPath) Then
        COSMOQCorr = "File not found"
        Exit Function
    End If
    
    Set tStrm = fs.OpenTextFile(outPath, ForReading)
    workStr = tStrm.ReadAll
    tStrm.Close
    
    With rx
        .Global = True
        .MultiLine = False
        .IgnoreCase = True
        .Pattern = "total energy after final integration\s+=\s*([0-9.-]+)\s*Eh.*\n" & _
                "(.*\n)+?total energy after outlying charge correction\s*=\s*" & _
                "([0-9.-]+)\s*Eh"
        
        If Not .Test(workStr) Then
            COSMOQCorr = "COSMO outlying energy correction not found."
            Exit Function
        End If
        
        Set mchs = .Execute(workStr)
        ' Only really care about the last one
        Set mch = mchs(mchs.Count - 1)
        uncorrEnergy = CDbl(mch.SubMatches(0))
        corrEnergy = CDbl(mch.SubMatches(2))
        COSMOQCorr = corrEnergy - uncorrEnergy
        
    End With
    
End Function

Sub testdict()
    Dim dict As New Scripting.Dictionary
    
    dict.Add 1, 5
    dict.Add "three", ThisWorkbook
    
End Sub

Sub testMEG()

    Dim MEG As New MemoENGRAD, OEG As ORCA_ENGRAD
    
    Set OEG = MEG.IMemoized_memoItem("C:\orca\freq\pyquin\pyquin_01.engrad")

End Sub

Sub arrayShift()
    Dim vt1 As Variant, vt2 As Variant
    
    ReDim vt1(0 To 2, 0 To 2)
    vt1(0, 0) = 4
    ReDim Preserve vt1(0 To 3, 0 To 3)
    
    Debug.Print vt1(1, 1)
    
End Sub

'        Case hessModesUnweighted
'            wkVt = wsf.MMult(hs.rootAtWtsMatrix, hs.modesArray)
'            outVt = MNormalize(MCol(wkVt, LBound(wkVt, 2)))
'            For iter = (LBound(wkVt, 2) + 1) To UBound(wkVt, 2)
'                outVt = MStackHoriz(outVt, _
'                        MNormalize(MCol(wkVt, iter)))
'            Next iter
'
'            quickHess = outVt

Sub xyztest()

    Dim XYZ As New ORCA_XYZ, fs As FileSystemObject
    
    XYZ.readXYZ "C:\ptest.trj", fs
    
    Debug.Print XYZ.atomDistance(1, 6, 7)
    
End Sub

Sub errtest()

    If False And (1 = "13") Then
        MsgBox "Not OK 1"
    Else
        MsgBox "OK 1"
    End If
    
    If (True) Or (13 = "sit") Then
        MsgBox "Not OK 2"
    Else
        MsgBox "OK 2"
    End If
        
End Sub
